#!/usr/bin/env node
/**
 * Module dependencies.
 */
const http = require("http");
//const vHost = require("vhost");

const errors = require("../common/errors");
const config = require("../common/config");
const log = require("../common/log")();
const api = require("../api");

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || "3000");
api.set("port", port);

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  if (error.code === "EACCES") {
    const e = errors.www(bind + " requires elevated privileges");
    log.error(e);
    process.exit(1);
  } else if (error.code === "EADDRINUSE") {
    const e = errors.www(bind + " is already in use");
    log.error(e);
    process.exit(1);
  } else {
    throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  log.debug("Listening on " + bind);
};

/**
 * Create HTTP server.
 */

const server = http.createServer(api);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
